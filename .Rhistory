x = c(1,4,6)
x.length()
length(x)
y <- c(2,5,7)
x+y
ls()
rm(x,y)
ls()
x=1
y=2
z=3
ls()
rm(list=ls())
?matrix
x=matrix(data=c(1,2,3,4),nrow=2,ncol=2,TRUE)
x
y=matrix(data=c(1,2,3,4),nrow=2,ncol=2)
y
z=matrix(c(46,76,78),1,1)
z
z=matrix(c(46,76,78),1,3)
z
rm(list=ls())
x=matrix(c(1,2,3,4),1,4)
sqrt(x)
x^4
rm(list=ls())
cls
cls()
clearPushBack()
?rnorm
x=rnorm(50)
x
rm(list=ls())
x=(10,50,5)
x=rnorm(10,50,5)
x
y=x+rnorm(10)
y
cor(x,y)
?cor
rm(list=ls())
x=rnorm(10)
y=rnorm(10)
plot(x,y)
?plot
plot(x,y,xlab = "tall i meters" , ylab = "age in 100 years",main = " plot of donkey")
pdf("fig.pdf")
z=seq(5,10)
z=seq(1,20,length=5)
z
x=seq(-pi,pi,10)
x
x=seq(-pi,pi,length=10)
x
?outer
x=seq(1,10)
x
y= 2 * x
?outer
f=outer(x,y,function(x,y) 2*y / 2 * x)
f
f=outer(x,y,function(x,y) cos(y) / (1+x^2))
f
contour(x,y,f)
contour(x,y,f,nlevels=45,add"T")
contour(x,y,f,nlevels = 45,add=T)
fa=(f-t(f))/2
contour(x,y,fa,nlevels = 15)
image(x,y,fa)
persp(x,y,fa)
persp(x,y,fa,theta = 39)
persp(x,y,fa,theta = 30,phi = 70)
persp(x,y,fa,theta = 30,phi = 20)
persp(x,y,fa,theta = 30,phi = 40)
image(x,y,fa)
A=matrix(1:16,4,4)
A[,]
A[,1:3]
persp(x,y,fa,theta = 30,phi = 40)
x=matirx(1:16,4,4)
x=matrix(1:16,4,4)
y=x
z=y*x
z
persp(x,y,z,theta = 30,phi = 40)
persp(x,y,fa,theta = 30,phi = 40)
persp(x,y,z,theta = 30,phi = 40)
View(z)
View(y)
View(x)
View(y)
View(z)
View(y)
View(x)
View(y)
f=outer(x,y,function(x,y) y^x)
f
view(f)
view(z)
veiw(f)
View(z)
f
f=0
A=0
persp(x,y,fa,theta = 30,phi = 40)
auto=read.table("Auto.data")
rm(x,y)
rm(Data)
rm(fa,z,A,f)
chick = read.csv(file = 'C:\Users\medo1\Downloads\ChickData.csv')
> chick <- read.csv(file = 'C:\Users\medo1\Downloads\ChickData.csv')
chick <- read.csv(file = 'C:\Users\medo1\Downloads\ChickData.csv')
gc()
library(readxl)
dataset <- read_excel(NULL)
d <- read.table(file="E:\Coding\R code\ChickData.csv")
d <- read.table(file="Coding\R code\ChickData.csv")
d <- read.table(file="\E:\Coding\R code\ChickData.csv")
library("readxl")
read_excel("E:\Coding\R code\ChickData.csv")
install.packages("readxl")
install.packages("readxl")
library("readxl")
read_excel("E:\Coding\R code\ChickData.csv")
cls
clear
clear()
cls
d <- read.table(file="E:\\Coding\\R code\\ChickData.csv")
View(d)
view(d)
View(d)
d <- read.table('E:\\Coding\\R code\\ChickData.csv')
view(d)
View(d)
View(d)
names(d)
d <- read.csv(file="E:\\Coding\\R code\\ChickData.csv")
names(d)
levels(feed)
levels(d$feed)
Levels(d$feed)
levels(d$feed)
table(d$feed)
boxplot(d$weight~d$feed,las=1,ylab = "weight (g)" , xlab = "feed" , main="weight by feed")
stat1 <- abs(diff(with(d,tapply(weight,feed,mean))))
stat2 <- abs(diff(with(d,tapply(weight,feed,median))))
set.seed(112358)
n <- length(d$feed)
B <- 10000
varible <- d$weight
BootstrapSamples <- matrix(sample(varible , size = n*B ,replace = TRUE,nrow = n ,ncol = B))
BootstrapSamples <- matrix(sample(varible , size = n*B ,replace = TRUE),nrow = n ,ncol = B)
View(BootstrapSamples)
dim(BootstrapSamples)
Boot.stat1 <- rep(0,B)
Boot.stat2 <- rep(0,B)
for(i in 1:B)
c;s
for(i in 1:B)
Boot.stat1[i] = abs(mean(BootstrapSamples[1:12,i])- mean(BootstrapSamples[13:23,i]))
for(i in 1:B)
+     Boot.stat2[i] = abs(median(BootstrapSamples[1:12,i])- median(BootstrapSamples[13:23,i]))
for(i in 1:B)
Boot.stat2[i] = abs(median(BootstrapSamples[1:12,i])- median(BootstrapSamples[13:23,i]))
view(Boot.stat1)
View(Boot.stat1)
Boot.stat1
mean(Boot.stat1 >= stat1)
meadin(Boot.stat1 >= stat2)
median(Boot.stat1 >= stat2)
mean(Boot.stat2 >= stat2)
source("C:/Users/medo1/Downloads/BootstrapHypTestScript.R", echo=TRUE)
setwd("C:/Users/medo1/Downloads")
setwd("E:/Coding/R code")
d <- read.csv(file="E:\\Coding\\R code\\ChickData.csv")
view(d)
View(d)
names(d)
level(d$feed)
Level(d$feed)
levels(d$feed)
table(d$feed)
box?
boxplot?
end
boxplot?
exit
?boxplot()
boxplot(d$weight~d$feed,las=1 , ylab = "weight" , xlab = "feed type" ,main = "weight by feed")
boxplot(d$weight~d$feed,las=2 , ylab = "weight" , xlab = "feed type" ,main = "weight by feed")
boxplot(d$weight~d$feed,las=3 , ylab = "weight" , xlab = "feed type" ,main = "weight by feed")
boxplot(d$weight~d$feed,las=5 , ylab = "weight" , xlab = "feed type" ,main = "weight by feed")
boxplot(d$weight~d$feed,las=2 , ylab = "weight" , xlab = "feed type" ,main = "weight by feed")
boxplot(d$weight~d$feed,las=1 , ylab = "weight" , xlab = "feed type" ,main = "weight by feed")
boxplot(d$weight~d$feed, ylab = "weight" , xlab = "feed type" ,main = "weight by feed")
boxplot(d$weight~d$feed,las=1 , ylab = "weight" , xlab = "feed type" ,main = "weight by feed")
stat1 = mean(d$weight[d$feed = "casein"])
stat1 <- mean(d$weight[d$feed = "casein"])
stat1 <- mean(d$weight[d$feed == "casein"])
stat2 <- median(d$weight[d$feed == "casein"])
stat1 <- abs(mean(d$weight[d$feed == "casein"]) - mean(d$weight[d$feed == "meatmeal"]))
stat2 <- abs(median(d$weight[d$feed == "casein"]) - median(d$weight[d$feed == "meatmeal"]))
set.seed(1999)
##### Permutation Test #######
set.seed(1999)
P <- 10000
n <- length(d$feed)
per_samples <- matrix(0 , nrow = n , ncol = P)
var <- d$weight
for(i in 1:P){
per_samples[,i](var , size = n , replace = FALSE)
}
#getting the permutation sample using loop
for(i in 1:P){
per_samples[,i] = sample(var , size = n , replace = FALSE)
}
View(per_samples)
View(per_samples)
per_means = rep(0 ,P)
per_means <- per_medians <- rep(0,P)
for(i in 1:P){
per_means[i] = abs(mean(d$weight[d$feed == "casein"]) - mean(d$weight[d$feed == "meatmeal"]))
per_medians[i] = abs( median(d$weight[d$feed == "casein"]) - median(d$weight[d$feed == "meatmeal"]) )
}
for(i in 1:P){
per_means[i] = abs(mean(d$weight[d$feed == "casein"]) - mean(d$weight[d$feed == "meatmeal"]))
per_medians[i] = abs( median(d$weight[d$feed == "casein"]) - median(d$weight[d$feed == "meatmeal"]) )
}
for(i in 1:P){
per_means[i] = abs(mean(d$weight[d$feed == "casein"]) - mean(d$weight[d$feed == "meatmeal"]))
per_medians[i] = abs( median(d$weight[d$feed == "casein"]) - median(d$weight[d$feed == "meatmeal"]) )
}
for(i in 1:P){
per_means[i] = abs(mean(d$weight[d$feed == "casein"]) - mean(d$weight[d$feed == "meatmeal"]))
per_medians[i] = abs( median(d$weight[d$feed == "casein"]) - median(d$weight[d$feed == "meatmeal"]) )
}
per_medians[i] = abs( median(per_samples[1:12,i]) - median(per_samples[13:23 ,i]))
for(i in 1:P){
per_means[i] = abs( mean(per_samples[1:12,i]) - mean(per_samples[13:23 ,i]))
per_medians[i] = abs( median(per_samples[1:12,i]) - median(per_samples[13:23 ,i]))
}
